<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
  <groupId>com.leo.microservice</groupId>
  <artifactId>service-boot</artifactId>
  <version>1.0</version>
  <name>service-boot</name>

  <!-- Inherit defaults from Spring Boot -->
	<parent>
	    <groupId>org.springframework.boot</groupId>
	    <artifactId>spring-boot-starter-parent</artifactId>
	   <!--  <version>1.3.3.RELEASE</version> -->
	   <version>1.3.3.RELEASE</version>
	</parent>
	 <properties>
	    <!-- Docker.registry 宿主机&端口 -->
    	<docker.registry>127.0.0.1:50000</docker.registry>
  	 </properties>
  	 <dependencyManagement>
	    <dependencies>
	        <dependency>
	            <groupId>org.springframework.cloud</groupId>
	            <artifactId>spring-cloud-dependencies</artifactId>
	            <version>Angel.SR6</version>
	            <type>pom</type>
	            <scope>import</scope>
	        </dependency>
	    </dependencies>
	</dependencyManagement>
	
    <dependencies>
    	<!-- <dependency>
        	<groupId>com.zookeeper</groupId>
        	<artifactId>service-zookeeper</artifactId>
        	<version>1.0</version>
        </dependency> -->
       <dependency>
        	<groupId>org.springframework.boot</groupId>
        	<artifactId>spring-boot-starter-web</artifactId>
        </dependency>
	    <dependency>
	        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-starter-config</artifactId>
    </dependency>
    <dependency>
	        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-starter-eureka</artifactId>
    </dependency>
    <dependency>
	        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-starter-eureka-server</artifactId>
    </dependency>
        
        <!-- 生产级特性   /metrics cpu、内存、JVM-->
        <dependency>
        	<groupId>org.springframework.boot</groupId>
        	<artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        
        <!-- 显示所有端点及链接  /actuator-->
        <dependency>
        	<groupId>org.springframework.boot</groupId>
        	<artifactId>spring-boot-starter-hateoas</artifactId>
        </dependency>
        <!-- 显示actuator 端点文档-->
        <!-- <dependency>
        	<groupId>org.springframework.boot</groupId>
        	<artifactId>spring-boot-starter-hateoas</artifactId>
        </dependency> -->
        <!-- 图形界面显示   /actuator-->
        <dependency>
        	<groupId>org.webjars</groupId>
        	<artifactId>hal-browser</artifactId>
        </dependency>
    </dependencies>
	
	<build>
	    <plugins>
	        <plugin>
	            <groupId>org.springframework.boot</groupId>
	            <artifactId>spring-boot-maven-plugin</artifactId>
	            <!-- <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions> -->
	        </plugin>
	        
	        <!-- maven构建docker镜像 ,使用前安装插件 http://github.com/spotify/docker-maven-plugin-->
	        <plugin>
	            <groupId>com.spotify</groupId>
	            <artifactId>docker-maven-plugin</artifactId>
	            <version>0.4.10</version>
	            <configuration>
	            <!-- ${project.groupId}:仓库名|${project.artifactId}: 镜像名|${project.version}:标签 -->
	            	<image>${docker.registry}/${project.groupId}/${project.artifactId}/${project.version}</image>
	            	<!-- 经maven资源过滤文件所在目录,已经替换为实际资源 -->
	            	<dockerDirectory>${project.build.outputDirectory}</dockerDirectory>
	            	<resources>
	            		<resource>
	            			<!-- 制定需要复制的根目录，即target -->
	            			<directory>${project.build.directory}</directory>
	            			<!-- 用于指定需要复制的文件，即maven打包生成的jar -->
	            			<include>${project.build.finalName}/</include>
	            		</resource>
	            	</resources>
	            </configuration>
	        </plugin>
	        
	        
	    </plugins>
	</build>
	

</project>
